#### 方法一：枚举

**思路与算法**

为了方便起见，我们用 $s$ 表示 $\textit{num}$ 对应十进制表示的字符串。我们可以从左至右枚举 $s$ 中长度为 $k$ 的字符串，并判断该子串对应的整数能否被 $\textit{num}$ 整除。与此同时，我们用 $\textit{res}$ 统计能被 $\textit{num}$ 整除的子串数量，如果某个子串能被 $\textit{num}$ 整除，则我们将 $\textit{res}$ 加上 $1$。最终，$\textit{res}$ 即为 $\textit{num}$ 的 $k$ 美丽值，我们返回 $\textit{res}$ 作为答案。

**代码**

* [sol1-C++]

```C++
class Solution {
public:
    int divisorSubstrings(int num, int k) {
        string s = to_string(num);   // num 十进制表示字符串
        int n = s.size();
        int res = 0;
        for (int i = 0; i <= n - k; ++i) {
            // 枚举所有长度为 k 的子串
            int tmp = stoi(s.substr(i, k));
            if (tmp && num % tmp == 0) {
                ++res;
            }
        }
        return res;
    }
};
```

* [sol1-Python3]

```Python
class Solution:
    def divisorSubstrings(self, num: int, k: int) -> int:
        s = str(num)   # num 十进制表示字符串
        n = len(s)
        res = 0
        for i in range(n - k + 1):
            # 枚举所有长度为 k 的子串
            tmp = int(s[i:i+k])
            if tmp != 0 and num % tmp == 0:
                res += 1
        return res
```

* [sol1-Java]

```Java
class Solution {
    public int divisorSubstrings(int num, int k) {
        String s = Integer.toString(num);   // num 十进制表示字符串
        int n = s.length();
        int res = 0;
        for (int i = 0; i <= n - k; ++i) {
            // 枚举所有长度为 k 的子串
            int tmp = Integer.parseInt(s.substring(i, i + k));
            if (tmp != 0 && num % tmp == 0) {
                ++res;
            }
        }
        return res;
    }
}
```

* [sol1-C#]

```C#
public class Solution {
    public int DivisorSubstrings(int num, int k) {
        string s = num.ToString();   // num 十进制表示字符串
        int n = s.Length;
        int res = 0;
        for (int i = 0; i <= n - k; ++i) {
            // 枚举所有长度为 k 的子串
            int tmp = int.Parse(s.Substring(i, k));
            if (tmp != 0 && num % tmp == 0) {
                ++res;
            }
        }
        return res;
    }
}
```

* [sol1-Go]

```Go
func divisorSubstrings(num int, k int) int {
    s := strconv.Itoa(num) // num 十进制表示字符串
    n := len(s)
    res := 0
    for i := 0; i <= n-k; i++ {
        // 枚举所有长度为 k 的子串
        tmp, _ := strconv.Atoi(s[i:i+k])
        if tmp != 0 && num%tmp == 0 {
            res++
        }
    }
    return res
}
```

* [sol1-C]

```C
int divisorSubstrings(int num, int k) {
    char s[12]; // 足够容纳数字的字符串
    sprintf(s, "%d", num);   // num 十进制表示字符串
    int n = strlen(s);
    int res = 0;
    for (int i = 0; i <= n - k; ++i) {
        // 枚举所有长度为 k 的子串
        char tmpStr[k + 1];
        strncpy(tmpStr, s + i, k);
        tmpStr[k] = '\0';
        int tmp = atoi(tmpStr);
        if (tmp != 0 && num % tmp == 0) {
            ++res;
        }
    }
    return res;
}
```

* [sol1-JavaScript]

```JavaScript
var divisorSubstrings = function(num, k) {
    let s = num.toString();   // num 十进制表示字符串
    let n = s.length;
    let res = 0;
    for (let i = 0; i <= n - k; ++i) {
        // 枚举所有长度为 k 的子串
        let tmp = parseInt(s.substring(i, i + k));
        if (tmp !== 0 && num % tmp === 0) {
            ++res;
        }
    }
    return res;
};
```

* [sol1-TypeScript]

```TypeScript
function divisorSubstrings(num: number, k: number): number {
    let s = num.toString();   // num 十进制表示字符串
    let n = s.length;
    let res = 0;
    for (let i = 0; i <= n - k; ++i) {
        // 枚举所有长度为 k 的子串
        let tmp = parseInt(s.substring(i, i + k));
        if (tmp !== 0 && num % tmp === 0) {
            ++res;
        }
    }
    return res;
};
```

* [sol1-Rust]

```Rust
impl Solution {
    pub fn divisor_substrings(num: i32, k: i32) -> i32 {
        let s = num.to_string();   // num 十进制表示字符串
        let n = s.len();
        let mut res = 0;
        for i in 0..= n - k as usize {
            // 枚举所有长度为 k 的子串
            let tmp: i32 = s[i..i + k as usize].parse().unwrap();
            if tmp != 0 && num % tmp == 0 {
                res += 1;
            }
        }
        res
    }
}
```

**复杂度分析**

- 时间复杂度：$O(nk)$，其中 $n$ 为 $\textit{num}$ 的位数, $k$ 为子串的长度。我们总共需要枚举 $O(n)$ 个子串，其中判断每个子串都需要 $O(k)$ 的时间复杂度。

- 空间复杂度：$O(n)$，即为辅助字符串的空间开销。

