🙋 今日打卡！

## 一、题目分析

题意：实现支持'?' 和 '*' 的通配符匹配的字符串匹配。

分析：类似 *最长公共子串*，*[最长公共子序列](https://leetcode-cn.com/problems/longest-common-subsequence/)*，*[编辑距离](https://leetcode-cn.com/problems/edit-distance/)* 等 **求 2 个字符串(或数组)之间的某种关系的题目**，一般来说都是有动态规划的解法的。

### 1、状态定义：

`dp[i][j]` 表示 p 的前 i 个字符和 s 的前 j 个字符是否匹配。

### 2、状态转移：

如果 `p[i - 1] == s[j - 1]` 或 `p[i - 1] == '?'`，表示当前的字符串是匹配的，`dp[i][j]` 可以从 `dp[i - 1][j - 1]` 转移而来。
如果 `p[i - 1] == '*'`，这个位置可以匹配 0 到 若干个字符。那么 `dp[i][j]` 可以从 `dp[i - 1][j]` 转移而来（表示当前星号没有匹配字符），也可以从 `dp[i][j - 1]` 转移而来（表示当前星号匹配了当前的位置的字符）。因为只要任意一种匹配即可，所以这里是逻辑或的关系。

状态转移方程如下：

$$ dp[i][j] = \begin{cases}  
dp[i-1][j-1] & & {p[i-1] == s[j-1]\ \ || \ \ p[i-1]=?} \\
dp[i-1][j]\ \ |\ \ dp[i][j-1] & & {p[i-1]==*}
\end{cases} $$

### 3、初始条件

`dp[0][0] = true` 表示空串是匹配的。

处理一下匹配串 p 以若干个星号开头的情况。因为星号是可以匹配空串的：

* 

```
for (int i = 1; i <= p.length(); i++) {
    if (p.charAt(i - 1) != '*') {
        break;
    } 
    dp[i][0] = true;
}
```

## 二、具体实现

* 

```
class Solution {
    public boolean isMatch(String s, String p) {
        int len1 = p.length(), len2 = s.length();
        boolean[][] dp = new boolean[len1 + 1] [len2 + 1];
        dp[0][0] = true;
        for (int i = 1; i <= len1; i++) {
            if (p.charAt(i - 1) != '*') {
                break;
            } 
            dp[i][0] = true;
        }

        for (int i = 1; i <= len1; i++) {
            for (int j = 1; j <= len2; j++) {
                if (p.charAt(i - 1) == s.charAt(j - 1) || p.charAt(i - 1) == '?') {
                    dp[i][j] = dp[i - 1][j - 1];
                } else if (p.charAt(i - 1) == '*') {
                    dp[i][j] = dp[i - 1][j] | dp[i][j - 1];
                } 
            }
        }
        return dp[len1][len2];
    }
}
```

## 三、题目拓展

* 最长公共子串： [718. 最长重复子数组](https://leetcode-cn.com/problems/maximum-length-of-repeated-subarray/) （类似题目，只是由字符串变为数组）
* [72. 编辑距离](https://leetcode-cn.com/problems/edit-distance/)
* [1143. 最长公共子序列](https://leetcode-cn.com/problems/longest-common-subsequence/)
* [10. 正则表达式匹配](https://leetcode-cn.com/problems/regular-expression-matching/)
* [583. 两个字符串的删除操作](https://leetcode-cn.com/problems/delete-operation-for-two-strings/)
* [727. 最小窗口子序列](https://leetcode-cn.com/problems/minimum-window-subsequence/)

你会发现这些都是 **求 2 个字符串(或数组)之间的某种关系的题目**

